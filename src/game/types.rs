/// All 18 Types from Pokemon as of 2023
#[derive(Debug, Clone, Copy)]
pub enum Type {
    Normal = 0,
    Fire = 1,
    Water = 2,
    Grass = 3,
    Electric = 4,
    Ice = 5,
    Fighting = 6,
    Poison = 7,
    Ground = 8,
    Flying = 9,
    Psychic = 10,
    Bug = 11,
    Rock = 12,
    Ghost = 13,
    Dark = 14,
    Dragon = 15,
    Steel = 16,
    Fairy = 17,
}

impl Type {
    pub const MULTIPLIERS: [[f32; 18]; 18] = [
    //    Nm   Fr   Wa   Ga   Ek   Ic   Fg   Pn   Gd   Fl   Ps   Bg   Rk   Gh   Dk   Dr   St   Fy
        [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 0.0, 1.0, 1.0, 0.5, 1.0 ], // Nm
        [ 1.0, 0.5, 0.5, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.5, 1.0, 1.0, 0.5, 2.0, 1.0 ], // Fr
        [ 1.0, 2.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.5, 1.0, 1.0 ], // Wa
        [ 1.0, 0.5, 2.0, 0.5, 1.0, 1.0, 1.0, 0.5, 2.0, 0.5, 1.0, 0.5, 2.0, 1.0, 1.0, 0.5, 0.5, 1.0 ], // Ga
        [ 1.0, 1.0, 2.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0 ], // Ek
        [ 1.0, 0.5, 0.5, 2.0, 1.0, 0.5, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.5, 1.0 ], // Ic
        [ 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0 ], // Fg
        [ 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 0.0, 1.0 ], // Pn
        [ 1.0, 2.0, 1.0, 0.5, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0 ], // Gd
        [ 1.0, 1.0, 1.0, 2.0, 0.5, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0 ], // Fl
        [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 2.0, 0.0, 1.0, 1.0, 1.0 ], // Ps
        [ 1.0, 0.5, 1.0, 2.0, 1.0, 1.0, 0.5, 0.5, 1.0, 0.5, 2.0, 1.0, 1.0, 0.5, 2.0, 1.0, 0.5, 0.5 ], // Bg
        [ 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 0.5, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0 ], // Rk
        [ 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.5, 1.0, 1.0 ], // Gh
        [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.5, 1.0, 1.0, 0.5 ], // Dk
        [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.5, 0.0 ], // Dr
        [ 1.0, 0.5, 0.5, 1.0, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 2.0 ], // St
        [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.5, 1.0 ], // Fy
    ];

    pub const TYPES: [&'static Self; 18] = [
        &Self::Normal,
        &Self::Fire,
        &Self::Water,
        &Self::Grass,
        &Self::Electric,
        &Self::Ice,
        &Self::Fighting,
        &Self::Poison,
        &Self::Ground,
        &Self::Flying,
        &Self::Psychic,
        &Self::Bug,
        &Self::Rock,
        &Self::Ghost,
        &Self::Dark,
        &Self::Dragon,
        &Self::Steel,
        &Self::Fairy,
    ];

    /// Returns a random Type, evenly distributed
    pub fn get_random() -> &'static Self {
        Self::TYPES[rand::random::<usize>() % 18]
    }

    pub fn get_multiplier(&self, other: &Self) -> f32 {
        Self::MULTIPLIERS[*self as usize][*other as usize]
    }
}
